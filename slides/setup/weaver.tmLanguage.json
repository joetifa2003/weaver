{
  "scopeName": "source.weaver",
  "name": "weaver",
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#function-calls"
    },
    {
      "include": "#identifiers"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#data-structures"
    },
    {
      "include": "#match-statements"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.weaver",
          "match": "\\b(if|else|for|while|match|return|break|continue|in)\\b"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.boolean.true.weaver",
          "match": "\\b(true)\\b"
        },
        {
          "name": "constant.language.boolean.false.weaver",
          "match": "\\b(false)\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.weaver",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.weaver",
          "match": "\\\\."
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.integer.weaver",
          "match": "\\b[0-9]+\\b"
        },
        {
          "name": "constant.numeric.float.weaver",
          "match": "\\b[0-9]+\\.[0-9]+\\b"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.weaver",
          "match": "//.*$"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.readwrite.weaver",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        },
        {
          "name": "variable.parameter.function.weaver",
          "match": "(?<=\\|)\\s*[a-zA-Z_][a-zA-Z0-9_]*\\s*(?=\\|)"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.weaver",
          "match": ":=|="
        },
        {
          "name": "keyword.operator.comparison.weaver",
          "match": "==|!=|>|<|>=|<="
        },
        {
          "name": "keyword.operator.arithmetic.weaver",
          "match": "\\+|-|\\*|/|%"
        },
        {
          "name": "keyword.operator.logical.weaver",
          "match": "&&|\\|\\||\\|"
        },
        {
          "name": "keyword.operator.pipe.weaver",
          "match": "\\|>"
        },
        {
          "name": "keyword.operator.accessor.weaver",
          "match": "\\."
        }
      ]
    },
    "function-calls": {
      "patterns": [
        {
          "name": "entity.name.function.weaver",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\s*(?=\\()"
        },
        {
          "name": "punctuation.definition.parameters.begin.weaver",
          "match": "\\("
        },
        {
          "name": "punctuation.definition.parameters.end.weaver",
          "match": "\\)"
        }
      ]
    },
    "data-structures": {
      "patterns": [
        {
          "name": "meta.structure.list.weaver",
          "begin": "\\[",
          "end": "\\]",
          "patterns": [{ "include": "$self" }]
        },
        {
          "name": "meta.structure.dictionary.weaver",
          "begin": "\\{",
          "end": "\\}",
          "patterns": [
            { "include": "$self" },
            {
              "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(:)",
              "captures": {
                "1": {
                  "name": "support.type.property-name.weaver"
                },
                "2": {
                  "name": "punctuation.separator.key-value.weaver"
                }
              }
            }
          ]
        },
        {
          "name": "punctuation.definition.object.begin.weaver",
          "match": "\\{"
        },
        {
          "name": "punctuation.definition.object.end.weaver",
          "match": "\\}"
        },
        {
          "name": "punctuation.separator.object.comma.weaver",
          "match": ","
        }
      ]
    },
    "match-statements": {
      "patterns": [
        {
          "name": "keyword.control.match.weaver",
          "match": "\\bmatch\\b"
        },
        {
          "name": "keyword.control.match.case.weaver",
          "match": "=>"
        },
        {
          "name": "keyword.control.match.else.weaver",
          "match": "\\belse\\b"
        },
        {
          "begin": "{",
          "end": "}",
          "patterns": [{ "include": "$self" }]
        }
      ]
    }
  }
}
