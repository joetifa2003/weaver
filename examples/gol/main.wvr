# Game of Life

rl := import("rl");
fiber := import("fiber");

CELL_SIZE := 5;
WORLD_WIDTH := 1024;
WORLD_HEIGHT := 1024;

ROWS := int(WORLD_HEIGHT / CELL_SIZE);
COLS := int(WORLD_WIDTH / CELL_SIZE);

# Number of chunks to divide the grid for parallel processing
NUM_CHUNKS := 10;  # You can adjust this based on your CPU

cells := makeArr(ROWS);
for (i := 0; i < ROWS; i++) {
    cells[i] = makeArr(COLS);
}

# Initialize random starting pattern
for (y := 0; y < ROWS; y++) {
    for (x := 0; x < COLS; x++) {
        cells[y][x] = rand() > 0.8;
    }
}

# Function to count living neighbors for a cell
countNeighbors := |y, x| {
    count := 0;

    for (dy := -1; dy <= 1; dy++) {
        for (dx := -1; dx <= 1; dx++) {
            if (dy == 0 && dx == 0) { 
              continue
            }

            ny := (y + dy + ROWS) % ROWS;    # Wrap around edges
            nx := (x + dx + COLS) % COLS;

            if (cells[ny][nx]) { 
              count++;
            }
        }
    }

    return count;
};

# Function to process a chunk of the grid
processChunk := |startRow, endRow, newCells| {
    return fiber.run(|| {
        for (y := startRow; y < endRow; y++) {
            for (x := 0; x < COLS; x++) {
                neighbors := countNeighbors(y, x);
                if (cells[y][x]) {
                    # Cell is alive
                    newCells[y][x] = neighbors == 2 || neighbors == 3;
                } else {
                    # Cell is dead
                    newCells[y][x] = neighbors == 3;
                }
            }
        }
    });
};

# Function to update the game state in parallel
updateCells := || {
    # Create a new grid for the next state
    newCells := makeArr(ROWS);
    for (i := 0; i < ROWS; i++) {
        newCells[i] = makeArr(COLS);
    }

    # Calculate chunk size
    chunkSize := int(ROWS / NUM_CHUNKS);
    if (chunkSize < 1) {
        chunkSize = 1;
    }

    # Create fibers for each chunk
    fibers := [];
    for (i := 0; i < ROWS; i = i + chunkSize) {
        endRow := i + chunkSize;
        if (endRow > ROWS) {
            endRow = ROWS;
        }
        fibers |> push(processChunk(i, endRow, newCells));
    }

    # Wait for all fibers to complete
    fiber.wait(fibers);

    return newCells;
};

rl.initWindow(WORLD_WIDTH, WORLD_HEIGHT, "Game of Life");

while (!rl.windowShouldClose()) {
    cells = updateCells();
    # Draw
    rl.beginDrawing();
    rl.clearBackground(rl.colorRayWhite);

    for (y := 0; y < ROWS; y++) {
        for (x := 0; x < COLS; x++) {
            if (cells[y][x]) {
                rl.drawRectangle(x * CELL_SIZE, y * CELL_SIZE, CELL_SIZE, CELL_SIZE, rl.colorBlack);
            }
        }
    }

    rl.drawFps(10, 10);
    rl.endDrawing();
}

rl.closeWindow();
